1.创建了一个空的项目
2.打开老的项目 找到NetworkConst类,修改DOMAIN为外网.运行老的项目
3.调试一下API文档
4.在新的项目中 找到老的项目的资源(除了layout文件夹之前) 拷贝过来.
    AppCompatActivity的Activity 它的父字体必须是   Theme.AppCompat.Light.NoActionBar
5.安装LayoutCreator插件

-------------
https://www.lingvist.com.hk/ 学习英语单词的网站
-------------

6.业务分析
引导页 - 第一次安装APP的时候 引导用户使用APP (ViewPager)
启动页面    -每次启动都会进来 动画(广告) 弹出框
7.登录页面
    - 注册页
    - 密码重置 (账号  本地验证码4~6  发送信息给你的手机(短信系统)    )
-----
http://blog.csdn.net/qq285016127/article/details/54835731  dataBinding
-----
8.登录页面的逻辑处理
>  用户登录成功后 要记住账号还有密码(只保存一条数据[加密] SharedPreference)
    > 登录成功后 只记住账号
    > 也可以在登录成功后 记住登录的账号 下次就可以通过下拉框来获取账号
    > 也可以动态的根据用户的输入情况 智能显示可能出现的账号

9.登录成功后 进入主页
1. 主页由4个子页面组成(由多个Fragment组成)
2. 首先关注"我的"页面  [展示了用户的信息]
3. 退出登录

#代码设计:
1.创建数据库jdmall.db  数据库表account(name,pwd) (用户表 1条数据  密码要加密)
2.实现Fragment的页面框架
3."我的"页面里面的用户信息 可以通过Application来存储
4.退出登录(清空数据库的账号密码  跳转到登录页面)

-------------
RSA AES  MD5
明文==>加密(密文)===>明文   AES
明文==>加密(密文)  MD5
加密的基础知识:
http://blog.csdn.net/qq285016127/article/details/37613285
http://blog.csdn.net/qq285016127/article/details/37613343
-------------

10.首页
    Banner 广告栏
    8大模块 - 子入口
    活动 - 11 12  ==>点击就是活动的页面
    秒杀  限时降价
    商品推荐  根据大数据分析用户可能喜欢的商品(数据收集)
            由GridView组成(2列)  行数不确定
        1.封装了Adapter
        2.封装了图片控件 (抽层)
        3.ScrollView嵌套了GridView/ListView/ScrollView出现问题
            GridView/ListView/ScrollView===>高度是不确定
            也就是说外层的ScrollView的高度是经过内部每个item的高度来计算 而内部的GridView也不确定
            解决方案:
                1.不要ScrollView了,底部的GridView+ViewHeader
                2.当GridView加载完数据后 重新计算GridView的高度(定死高度) 此时外面就可以计算了.

一个页面使用模块化请求的分析:
好处:对于前端来说 加载起来更快(不再是同一个接口 再经过漫长的计算划分数据)
坏处:加重了服务器的负载

11. 分类页面分析:
> 顶部的搜索
------------一级分类与二级分类 使用的是同一个接口------------
> 左边的一级分类
> 右边的二级分类和三级分类(数组个数是不确定)
    三级分类分析(见资料/三级分类.png)

12.商品列表
>主页 数据的展示需要通过侧滑页面的参数来实现
    指示器的点击事件
        综合:弹出框
        销量/价格排序
        筛选
    商品列表显示:搜索商品的接口
    搜索商品接口可以用在2个地方:
        1.商品列表(可能出现的参数)
            categoryId: (必须) 分类id

            filterType: (必须) 排序类型（1-综合 2-新品 3-评价）

            sortType: (可选) 排序条件（1-销量 2-价格高到低 3-价格低到高）

            deliverChoose: (必须)
            选择类型（0-代表无选择 1代表京东配送 2-代表货到付款 4-代表仅看有货
                        3代表条件1+2 5代表条件1+4 6代表条件2+4）

            brandId: (可选) 品牌id

            分析价格排序:
                一开始进来的时候/如果是销量排序/如果是从低到高 :从高到低
                如果是从高到低 :从低到高

        2.搜索商品

>侧滑页面
    品牌模块===>参数 一级分类的id

-----------------
http://blog.csdn.net/qq285016127/article/details/71513387
-----------------


商品介绍页面的思路:
1.写好布局  找控件
2.请求数据
3.设置控件
    1 写好轮播图
    2 展示简单的数据
    3 商品的型号:ScrollView嵌套ListView
    4 设置购买数量的上下限 (抽取成一个组件)
    5 好评:ScrollView嵌套ListView

加入购物车:/toShopCar
userId: required (long)用户id===>Application
productId: required (long)商品id===>Activity
buyCount: required (integer)购买数量===>NumberInputView
pVersion: required (String)购买商品型号===>mProductVersionAdapter
提示信息:加入购物车的按钮在Activity(加入购物车请求必须在Activity实现)

正常的业务逻辑:
点击加入购物车 先判断商品的型号对应的库存够不够

购物车业务逻辑:

真实的场景:
       1.修改购买商品的数量的控件

----------------------
https://github.com/baoyongzhang/SwipeMenuListView  侧滑删除的列表控件
----------------------

在一个列表中 onItemClickListener的接口方法会在用户点击的时候被调用,
但是如果item有按钮/CheckBox 那么他们会抢占整个item的焦点 也就是onItemClickListener的方法不会被调用
解决方案:
在item的布局最外层 添加属性  android:descendantFocusability="blocksDescendants"
该属性告诉我们 点击的时候 虽然按钮/CheckBox能够获取焦点 然后他们会将焦点传递给整个item
---------------------------
点击单选
    修改某个item选中状态--->先给Bean一个是否选中的属性[测试通过]==>点击将属性取反  notify...
    可能修改全选按钮--->循环遍历 如果每个按钮都选中 则全选选中
    A
全选按钮
    修改每个item选中状态-->修改adapter里面每个bean的选中状态 notify...
    修改全选按钮  setOnClickListener
    A
删除
    实现网络请求 如果成功-->删除adapter里面对应的bean notify...
    A
-----------------------------
思路:
    每个按钮最后都要调用( 修改总价+修改结算按钮[这2个方法应该由adapter来提供]===>抽成一个方法A)

结算:


省市区的常见操作:
* 一般情况下 省市区的数据基本是不变.
* 有的公司将数据封装在assets目录下 以txt/xml/json文件的格式
* 也有的公司将数据在项目第一次启动的时候 将assets目录下的.sql脚本文件填充到安卓的数据库中
* 也有的公司直接将数据存储在网络上

* 省市区是三级管理的,省市区都有2个属性 一个code(给系统用的) 一个是name(给用户看的)
    省code
        市
            区
            区
        市
        市


填写订单:
1. 显示收货人地址
        > 获取默认的收货人地址
        > 点击选择地址 点击地址列表的item ---->修改收货地址
        > 点击添加地址 保存一个新的地址 ---->修改收货地址
2. 显示购买商品的信息
3. 支付方式:按钮是互斥的
4. 提交订单-根据支付方式来实现对应的操作


电商APP: 买家版  卖家版
一个APP包含买家版+卖家版(商铺 商铺管理)
将买家版&卖家版 做成2个APP

平板 电视端(机顶盒  遥控 每个控件按钮焦点)


订单的状态
在线支付:待支付--[付款]--->待发货--[商家发货]-->待收货---->已完成订单(评价)
                --->取消订单
货到付款:待发货(商家)--[商家发货]-->待收货---->已完成订单(评价)
不涉及退款退货(买家必须提供物流信息)/仅退款(货没到 虚拟产品)

String urlPath = NetworkConst.GET_ORDER_LIST + "?userId=" + getUserId();
urlPath += index >= -1 ? ("&status=" + index) : "";

等待支付:继续支付  取消订单
支付成功后 商家就应该发货      模拟商家发货: http://mall.520it.com/deliver?userId=1&oid=1
等待收货:确认收货
所有订单:继续支付/取消订单/确认收货


提交订单的界面中,显示的金额不是最后要支付的金额.
一般情况下 当金额非常少的情况 买家需要再次支付运费 其运算是在提交订单的网络请求中后台计算的









